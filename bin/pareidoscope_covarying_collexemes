#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import collections
import logging
import multiprocessing
import os
import itertools
import json
import tempfile

from networkx.readwrite import json_graph

import pareidoscope.query
from pareidoscope import subgraph_isomorphism
from pareidoscope.utils import database
from pareidoscope.utils import statistics
from pareidoscope.utils import nx_graph

# logging.basicConfig(format="%(levelname)s %(asctime)s: %(message)s", level=logging.INFO)
logging.basicConfig(format="%(levelname)s %(asctime)s: %(message)s", level=logging.DEBUG)


Frequencies = collections.namedtuple("Frequencies", ["embeddings", "subgraphs", "focus_points", "sentences"])


def arguments():
    """"""
    parser = argparse.ArgumentParser(description="Perform a covarying collexeme analysis, i.e. find cooccurring words within a linguistic structure. If the structure is a single dependency relation, this is equivalent to relational cooccurrences.")
    parser.add_argument("-c", "--collexeme", choices=["word", "lemma"], default="lemma", help="Should we look for collexemes at the word level or at the lemma level? Default: lemma")
    parser.add_argument("-o", "--output", type=str, required=True, help="Output prefix")
    parser.add_argument("-p", "--cpu", type=int, default=25, help="Percentage of CPUs to use (0-100; default: 25)")
    parser.add_argument("CORPUS", type=os.path.abspath, help="Input corpus as SQLite3 database")
    parser.add_argument("QUERIES", type=argparse.FileType("r", encoding="utf-8"), help="Queries file as JSON list")
    return parser.parse_args()


def identify_collo_items(graph):
    """Search for collo_A and collo_B"""
    collo_a, collo_b, focus_point = None, None, None
    for v, l in graph.nodes(data=True):
        if "collo_A" in l:
            collo_a = v
            del l["collo_A"]
        if "collo_B" in l:
            collo_b = v
            del l["collo_B"]
        if "focus_point" in l:
            focus_point = v
            del l["focus_point"]
    if focus_point is None:
        focus_point = nx_graph.get_choke_point(graph)
    assert collo_a is not None and collo_b is not None and focus_point is not None
    return graph, focus_point, collo_a, collo_b


def get_cooccurrences(args):
    """"""
    query_graph, target_graph, focus_point, collo_a, collo_b, word_or_lemma = args
    pairs = {}
    embeddings = collections.defaultdict(int)
    subgraphs = collections.defaultdict(set)
    focus_points = collections.defaultdict(set)
    sentences = set()
    target_graph = json_graph.node_link_graph(json.loads(target_graph))
    isomorphisms = subgraph_isomorphism.get_subgraph_isomorphisms_nx(pareidoscope.query.strip_vid(query_graph), target_graph)
    total_subgraphs, total_focus_points = set(), set()
    for iso in isomorphisms:
        item_a = target_graph.node[iso[collo_a]][word_or_lemma]
        item_b = target_graph.node[iso[collo_b]][word_or_lemma]
        pair = (item_a, item_b)
        embeddings[pair] += 1
        subgraph = tuple(sorted(iso))
        subgraphs[pair].add(subgraph)
        total_subgraphs.add(subgraph)
        focus_points[pair].add(iso[focus_point])
        total_focus_points.add(iso[focus_point])
        sentences.add(pair)
    for pair in sentences:
        pairs[pair] = Frequencies(embeddings[pair], len(subgraphs[pair]), len(focus_points[pair]), 1)
    sample_sizes = Frequencies(sum(embeddings.values()), len(total_subgraphs), len(total_focus_points), min(1, len(sentences)))
    return pairs, sample_sizes


def merge_results(r):
    """"""
    pairs = collections.defaultdict(lambda: (0, 0, 0, 0))
    sample_sizes = [0, 0, 0, 0]
    for ps, sam_siz in r:
        sample_sizes = [sum(_) for _ in zip(sample_sizes, sam_siz)]
        for pair, freqs in ps:
            pairs[pair] = [sum(_) for _ in zip(pairs[pair], freqs)]
    

def main():
    """"""
    args = arguments()
    results = []
    conn, c = database.connect_to_database(args.CORPUS)
    queries = pareidoscope.query.read_queries(args.QUERIES)
    pairs = collections.defaultdict(lambda: (0, 0, 0, 0))
    marginals_a = collections.defaultdict(lambda: (0, 0, 0, 0))
    marginals_b = collections.defaultdict(lambda: (0, 0, 0, 0))
    sample_sizes = (0, 0, 0, 0)
    cpu_count = multiprocessing.cpu_count()
    processes = min(max(1, int(cpu_count * args.cpu / 100)), cpu_count)
    with multiprocessing.Pool(processes=processes) as pool:
        for i, query in enumerate(queries):
            logging.info("query no. %d" % i)
            graph, focus_point, collo_a, collo_b = identify_collo_items(query)
            with tempfile.TemporaryFile() as fp:
                sents = database.sentence_candidates(c, pareidoscope.query.strip_vid(graph))
                for s in sents:
                    fp.write((s + "\n").encode(encoding="utf-8"))
                fp.seek(0)
                sentences = (s.decode(encoding="utf-8").rstrip() for s in fp)
                query_args = zip(itertools.repeat(graph), sentences, itertools.repeat(focus_point), itertools.repeat(collo_a), itertools.repeat(collo_b), itertools.repeat(args.collexeme))
                r = pool.imap_unordered(get_cooccurrences, query_args, 10)
                for ps, sam_siz in r:
                    sample_sizes = [sum(_) for _ in zip(sample_sizes, sam_siz)]
                    for pair, freqs in ps.items():
                        pairs[pair] = [sum(_) for _ in zip(pairs[pair], freqs)]
            for pair, freqs in pairs.items():
                item_a, item_b = pair
                marginals_a[item_a] = [sum(_) for _ in zip(marginals_a[item_a], freqs)]
                marginals_b[item_b] = [sum(_) for _ in zip(marginals_b[item_b], freqs)]
            local_result = {}
            for pair, freq in pairs.items():
                item_a, item_b = pair
                local_result[pair] = {"%s_A" % args.collexeme: item_a, "%s_B" % args.collexeme: item_b}
                frequencies = zip(freq, marginals_a[item_a], marginals_b[item_b], sample_sizes)
                counting_methods = ("embeddings", "subgraphs", "focus_points", "sentences")
                for cm, f in zip(counting_methods, frequencies):
                    o, e = statistics.get_contingency_table(f[0], f[1], f[2], f[3])
                    log_likelihood = statistics.one_sided_log_likelihood(o, e)
                    t_score = statistics.t_score(o, e)
                    dice = statistics.dice(o, e)
                    local_result[pair][cm] = {"o11": f[0], "r1": f[1], "c1": f[2], "n": f[3], "log_likelihood": log_likelihood, "t_score": t_score, "dice": dice}
            sorted_pairs = sorted(local_result.keys(), key=lambda x: local_result[x]["focus_points"]["log_likelihood"], reverse=True)
            results.append([local_result[p] for p in sorted_pairs])
        with open("%s.json" % args.output, "w") as fh:
            json.dump(results, fh, ensure_ascii=False, indent=4, sort_keys=True)



if __name__ == "__main__":
    main()
