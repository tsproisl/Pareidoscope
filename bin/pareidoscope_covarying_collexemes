#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""generate all embeddings

an embedding is a tuple of vertex ids where the ids correspond to the
target indices and their indices to query indices

count embeddings: use embeddings directly

count subgraphs: two embeddings are the same subgraph if their sets
are identical

count focus points: two embeddings are counted only once if they have
the same value for the focus point vertex

count sentences: two embeddings are counted only once if they occur in
the same sentences

partition the embeddings

for every partition, increment counts for all instances of node,
collocate and their combinations

"""

import argparse


def arguments():
    """"""
    parser = argparse.ArgumentParser(description='blafasel')
    # parser.add_argument("-a", help="Determine frequencies for all counting methods and not only for focus points", action='store_true')
    # parser.add_argument("-f", "--format", choices=["conllu", "cwb", "db"], required=True, help="Input format of the corpus: Either a text-based format (CoNLL-U or CWB-treebank) or a database created by pareidoscope_corpus_to_sqlite")
    # parser.add_argument("-o", "--output", type=str, required=True, help="Output prefix")
    # parser.add_argument("-p", "--cpu", type=int, default=25, help="Percentage of CPUs to use (0-100; default: 25)")
    # parser.add_argument("CORPUS", type=os.path.abspath, help="Input corpus")
    # parser.add_argument("QUERIES", type=argparse.FileType("r", encoding="utf-8"), help="Queries file as JSON list")
    return parser.parse_args()


def main():
    """"""
    args = arguments()


if __name__ == "__main__":
    main()
