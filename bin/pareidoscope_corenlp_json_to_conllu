#!/usr/bin/env python3

import argparse
import collections
import json
import gzip
import operator
import os
import re
import functools


def arguments():
    parser = argparse.ArgumentParser(description="Convert the JSON output of Stanford CoreNLP to CoNNL-U format.")
    parser.add_argument("JSON", type=os.path.abspath, help="JSON output of Stanford CoreNLP")
    return parser.parse_args()


@functools.lru_cache(maxsize=4096)
def map_penn_to_upos(lemma, xpostag, deprel, gov_pos):
    mapping = {"CC": "CONJ", "CD": "NUM", "EX": "PRON", "FW": "EX",
               "JJ": "ADJ", "JJR": "ADJ", "JJS": "ADJ", "LS": "X",
               "MD": "AUX", "NNS": "NOUN", "NNP": "PROPN", "NNPS":
               "PROPN", "PDT": "DET", "POS": "PART", "PRP": "PRON",
               "PRP$": "PRON", "RBR": "ADV", "RBS": "ADV", "RP":
               "ADP", "UH": "INTJ", "WP": "PRON", "WP$": "PRON",
               "WRB": "ADV", "``": "PUNCT", "''": "PUNCT", "(":
               "PUNCT", ")": "PUNCT", "-LRB-": "PUNCT", "-RRB-":
               "PUNCT", ",": "PUNCT", ".": "PUNCT", ":": "PUNCT",
               "HYPH": "PUNCT", "#": "SYM", "$": "SYM", "ADD": "X",
               "AFX": "X", "GW": "X", "XX": "X"}
    fused_det_noun_pronouns = set(["somebody", "something", "someone", "anybody", "anything", "anyone", "everybody", "everything", "everyone", "nobody", "nothing"])
    aux_relations = set(["aux", "aux:pass", "cop"])
    this_that = set(["this", "that", "these", "those"])
    that_which = set(["that", "which"])
    if xpostag in mapping:
        return mapping[xpostag]
    if xpostag == "TO":
        if deprel == "mark" and gov_pos == "VB":
            return "PART"
        return "ADP"
    if xpostag.startswith("VB"):
        if deprel in aux_relations:
            return "AUX"
        return "VERB"
    if xpostag.startswith("IN"):
        if deprel == "mark":
            return "SCONJ"
        return "ADP"
    if xpostag == "NN":
        if lemma == "%":
            return "SYM"
        if lemma in fused_det_noun_pronouns:
            return "PRON"
        return "NOUN"
    if xpostag == "NFP":
        if re.search(r"^(?:~+|\*+|-+)$", lemma):
            return "PUNCT"
        return "SYM"
    if xpostag == "RB":
        if lemma == "not":
            return "PART"
        return "ADV"
    if xpostag == "DT":
        if lemma in this_that and deprel != "det":
            return "PRON"
        return "DET"
    if xpostag == "WDT":
        if lemma in that_which and deprel != "det":
            return "PRON"
        return "DET"
    return "_"


def main():
    args = arguments()
    if args.JSON.endswith(".gz"):
        with gzip.open(args.JSON, mode="rt") as f:
            data = json.load(f)
    else:
        with open(args.JSON, mode="r") as f:
            data = json.load(f)
    for sentence in data["sentences"]:
        tokens = {t["index"]: t for t in sentence["tokens"]}
        basic_deps = {d["dependent"]: d for d in sentence["basicDependencies"]}
        epp_deps = collections.defaultdict(list)
        for d in sentence["enhancedPlusPlusDependencies"]:
            epp_deps[d["dependent"]].append(d)
        print("# sent_id = %d" % sentence["index"])
        original_text = "".join([t["originalText"] + t["after"] for idx, t in sorted(tokens.items())]).rstrip()
        print("# text = %s" % original_text)
        for idx, token in sorted(tokens.items()):
            form = token["word"]
            lemma = token["lemma"]
            xpostag = token["pos"]
            head = basic_deps[idx]["governor"]
            deprel = basic_deps[idx]["dep"]
            if deprel == "ROOT":
                deprel = "root"
            governor = tokens.get(head)
            gov_pos = None
            if governor is not None:
                gov_pos = governor["pos"]
            upostag = map_penn_to_upos(lemma, xpostag, deprel, gov_pos)
            deps = set()
            for d in sorted(epp_deps[idx], key=operator.itemgetter("governor")):
                governor = d["governor"]
                dep = d["dep"]
                if dep == "ROOT":
                    dep = "root"
                # no self-loops
                if governor != idx:
                    # no parallel edges
                    deps.add((governor, dep))
            print("\t".join((str(idx), form, lemma, upostag, xpostag, "_", str(head), deprel, "|".join(("%d:%s" % (g, d) for g, d in sorted(deps))), "_")))
        print()


if __name__ == "__main__":
    main()
