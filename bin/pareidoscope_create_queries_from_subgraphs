#!/usr/bin/python
# -*- coding: utf-8 -*-

import argparse
import collections
import itertools
import json
import operator
import os
import random
import sys

from networkx.readwrite import json_graph

from pareidoscope.utils import nx_graph
from pareidoscope.utils import random_trees
from pareidoscope.utils import cwb


def underspecify(graph, probability):
    """
    """
    for v in graph.nodes():
        if random.random() < probability:
            graph.node[v]["word"] = ".+"
            graph.node[v]["pos"] = ".+"
            graph.node[v]["lemma"] = ".+"
            graph.node[v]["wc"] = ".+"
    for s, t in graph.edges():
        if random.random() < probability:
            graph.edge[s][t]["relation"] = ".+"



if __name__ == "__main__":
    description = "Create queries based on frequent subgraphs (extracted with pareidoscope_frequent_subgraphs)."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("--underspec", help="Probability for a vertice or edge to be underspecified, i.e. to be labeled '.+'; default: 0.0", type=float, default=0.0, metavar="R")
    parser.add_argument("-o", "--outfile", type=argparse.FileType("w"), required=True, help="Output file")
    parser.add_argument("SUBGRAPHS", type=argparse.FileType("r"), help="Frequent subgraphs file (JSON)")
    args = parser.parse_args()
    
    subgraphs = json.load(args.SUBGRAPHS)
    for subgraph in subgraphs:
        sg = json_graph.node_link_graph(json.loads(subgraph))
        underspecify(sg, args.underspec)
        # a, b, r1, c1, n = random_trees.split_tree(tree)
        # args.outfile.write("\t".join([json.dumps(nx_graph.export_to_adjacency_matrix(x)) for x in [subgraph, a, b, r1, c1, n]]) + "\n")
        print json.dumps(json_graph.node_link_data(sg))
