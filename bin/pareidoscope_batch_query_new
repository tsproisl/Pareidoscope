#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import json

import pareidoscope.query
from pareidoscope.utils import cwb
from pareidoscope.utils import helper
from pareidoscope.utils import nx_graph


def read_queries(queries_file):
    """Read all queries."""
    queries = [line.rstrip("\n").split("\t") for line in queries_file if not (line.startswith("#") or line == "\n")]
    queries = [[nx_graph.create_nx_digraph(json.loads(q)) for q in l] for l in queries]
    return queries


def check_queries(queries):
    """Do a sanity check on all queries."""
    queries = [q for q in queries if pareidoscope.query.sanity_check_c_a_b(*q)]
    return queries


def derive_gn(queries):
    """For all queries, derive gn from gc, ga and gb."""
    queries = [q + [pareidoscope.query.get_n_from_c_a_b(*q)] for q in queries]
    return queries


def search_choke_points(queries):
    """Search for choke point vertices"""
    queries = [q + [nx_graph.get_choke_point(q[3])] for q in queries]
    return queries


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Run a batch of queries against a corpus')
    parser.add_argument("-c", "--corpus", type=argparse.FileType("r"), required=True, help="Corpus in CWB format")
    parser.add_argument("-o", "--output", type=str, required=True, help="Output prefix")
    parser.add_argument("QUERIES", type=argparse.FileType("r"), help="Queries file with G_C\tG_A\tG_A")
    args = parser.parse_args()
    
    queries = read_queries(args.QUERIES)
    queries = check_queries(queries)
    queries = derive_gn(queries)
    queries = search_choke_points(queries)
    for l in queries:
        for q in l[:-1]:
            print(nx_graph.export_to_adjacency_matrix(q))
    
    # results = [{} for q in queries]
    # pool = multiprocessing.Pool(processes=multiprocessing.cpu_count())
    # sents = cwb.sentences_iter(args.corpus)
    # for sentences in helper.grouper_nofill(groupsize, sents):
    #     r = pool.imap(pareidoscope.query.run_queries, itertools.izip(sentences, itertools.repeat(queries)), 10)
    #     # r = map(pareidoscope.query.run_queries, itertools.izip(sentences, itertools.repeat(queries)))
    #     for result, sensible in r:
    #         if sensible:
    #             pareidoscope.query.merge_result(result, results)
    # write_results(args.output, results)
